{
  "id": "dbedd4b2-c963-475d-8057-72a15e532fd5",
  "revision": 0,
  "last_node_id": 99,
  "last_link_id": 512,
  "nodes": [
    {
      "id": 55,
      "type": "UnetLoaderGGUF",
      "pos": [
        310.0064697265625,
        50.92102813720703
      ],
      "size": [
        270,
        58
      ],
      "flags": {},
      "order": 0,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "MODEL",
          "type": "MODEL",
          "links": [
            442
          ]
        }
      ],
      "properties": {
        "cnr_id": "ComfyUI-GGUF",
        "ver": "3d673c5c098ecaa6e6027f834659ba8de534ca32",
        "Node name for S&R": "UnetLoaderGGUF"
      },
      "widgets_values": [
        "3_K_L.gguf"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 46,
      "type": "GeminiAPI",
      "pos": [
        38.03337097167969,
        -1115.2794189453125
      ],
      "size": [
        504.87994384765625,
        540.6761474609375
      ],
      "flags": {},
      "order": 17,
      "mode": 0,
      "inputs": [
        {
          "name": "image",
          "shape": 7,
          "type": "IMAGE",
          "link": 428
        },
        {
          "name": "video",
          "shape": 7,
          "type": "IMAGE",
          "link": null
        },
        {
          "name": "audio",
          "shape": 7,
          "type": "AUDIO",
          "link": null
        },
        {
          "name": "prompt",
          "type": "STRING",
          "widget": {
            "name": "prompt"
          },
          "link": 437
        }
      ],
      "outputs": [
        {
          "name": "text",
          "type": "STRING",
          "links": [
            429,
            430
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfyui-ollamagemini",
        "ver": "2.0.7",
        "Node name for S&R": "GeminiAPI"
      },
      "widgets_values": [
        "\"\"\"Your Role: You are an analytical assistant. Your task is to process a source image and a corresponding editing instruction, assuming the instruction accurately describes a desired transformation. You will 1) describe the source image, 2) output the editing instruction (potentially refined for clarity based on the source image context), and 3) describe the *imagined* result of applying that instruction.\n\nInput:\n1. Source Image: The original 'before' image.\n2. Source Instruction: A text instruction describing the edit to be performed on the Source Image. You *must assume* this instruction is accurate and feasible for the purpose of this task.\n\nTask Breakdown:\n1.  **Describe Source Image:** Generate a description (e.g., key subject, setting) of the Source Image by analyzing it. This will be the first line of your output.\n\n2.  **Output Editing Instruction:** This step determines the second line of your output.\n    * **Assumption:** The provided Source Instruction *accurately* describes the desired edit.\n    * **Goal:** Output a concise, single-line instruction based on the Source Instruction.\n    * **Refinement based on Source Image:** While the Source Instruction is assumed correct, analyze the Source Image to see if the instruction needs refinement for specificity. If the Source Image contains multiple similar objects and the Source Instruction is potentially ambiguous (e.g., \"change the car color\" when there are three cars), refine the instruction to be specific, using positional qualifiers (e.g., 'the left car', 'the bird on the top branch'), size ('the smaller dog', 'the largest building'), or other distinguishing visual features apparent in the Source Image. If the Source Instruction is already specific or if there's no ambiguity in the Source Image context, you can use it directly or with minor phrasing adjustments for naturalness. The *core meaning* of the Source Instruction must be preserved.\n    * **Output:** Present the resulting specific, single-line instruction as the second line.\n\n3.  **Describe Imagined Target Image:** Based *only* on the Source Image description (Line 1) and the Editing Instruction (Line 2), generate a description of the *imagined outcome*.\n    * Describe the scene from Line 1 *as if* the instruction from Line 2 has been successfully applied. Conceptualize the result of the edit on the source description.\n    * This description must be purely a logical prediction based on applying the instruction (Line 2) to the description in Line 1. Do *not* invent details not implied by the instruction or observed in the source image beyond the specified edit. This will be the third line of your output.\n\nOutput Format:\n* Your response *must* consist of exactly three lines.\n* Do not include any other explanations, comments, introductory phrases, labels (like \"Line 1:\"), or formatting.\n* Your output should be in English.\n\nLine 1: [Description of the Source Image]\nLine 2: [The specific, single-line editing instruction based on the Source Instruction and Source Image context]\nLine 3: [Description of the Imagined Target Image based on Lines 1 & 2]\n\nExample 1 (Instruction needs refinement):\nInput: (Source Image: Street with three parked cars), Source Instruction: \"change car color to red\"\nOutput:\nStreet with three parked cars.\nChange the color of the middle car to red.\nStreet with three parked cars, middle one is red.\n\nExample 2 (Instruction is specific enough):\nInput: (Source Image: Two brown dogs sitting on grass), Source Instruction: \"Add sunglasses to the dog on the left.\"\nOutput:\nTwo brown dogs sitting on grass.\nAdd sunglasses to the dog on the left.\nTwo brown dogs on grass, left one wearing sunglasses.\n\nNow, please generate the three-line output based on the Source Image and the Source Instruction: {source_instruction}",
        "image",
        "gemini-2.0-flash-001",
        false,
        false,
        "Custom",
        "Return only the prompt text itself. No explanations or formatting.",
        "raw_text"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 47,
      "type": "ShowText|pysssss",
      "pos": [
        797.4551391601562,
        -1107.958984375
      ],
      "size": [
        410.2334899902344,
        251.7648162841797
      ],
      "flags": {},
      "order": 18,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 429
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "shape": 6,
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "comfyui-custom-scripts",
        "ver": "1.2.5",
        "Node name for S&R": "ShowText|pysssss"
      },
      "widgets_values": [
        "A man in a jacket and scarf stands with his hands in his pockets against a gray background.\nAdd glasses to this person.\nA man wearing glasses, a jacket, and a scarf stands with his hands in his pockets against a gray background."
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 50,
      "type": "CR Text Replace",
      "pos": [
        -408.87115478515625,
        -1055.7767333984375
      ],
      "size": [
        270,
        198
      ],
      "flags": {},
      "order": 16,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 435
        },
        {
          "name": "replace1",
          "shape": 7,
          "type": "STRING",
          "widget": {
            "name": "replace1"
          },
          "link": 503
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "type": "*",
          "links": [
            437
          ]
        },
        {
          "name": "show_help",
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "ComfyUI_Comfyroll_CustomNodes",
        "ver": "d78b780ae43fcf8c6b7c6505e6ffb4584281ceca",
        "Node name for S&R": "CR Text Replace"
      },
      "widgets_values": [
        "xxxx",
        "",
        "",
        "",
        "",
        ""
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 87,
      "type": "CR Text Replace",
      "pos": [
        -853.2256469726562,
        -990.0559692382812
      ],
      "size": [
        270,
        198
      ],
      "flags": {},
      "order": 14,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 498
        },
        {
          "name": "replace1",
          "shape": 7,
          "type": "STRING",
          "widget": {
            "name": "replace1"
          },
          "link": 511
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "type": "*",
          "links": [
            503
          ]
        },
        {
          "name": "show_help",
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "ComfyUI_Comfyroll_CustomNodes",
        "ver": "d78b780ae43fcf8c6b7c6505e6ffb4584281ceca",
        "Node name for S&R": "CR Text Replace"
      },
      "widgets_values": [
        "xyz",
        "",
        "",
        "",
        "",
        ""
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 96,
      "type": "MarkdownNote",
      "pos": [
        -1897.9039306640625,
        -1025.076904296875
      ],
      "size": [
        261.423583984375,
        322.17596435546875
      ],
      "flags": {},
      "order": 1,
      "mode": 0,
      "inputs": [],
      "outputs": [],
      "properties": {},
      "widgets_values": [
        "# HiDream-E1 examples\n\nFirstly, you can use the auto restyle prompt:  \n**\"Apply \"_xyz_\" style to this image\"**  \nand choose your style from **GeminiComfyUIStyler**.\n\nOtherwise, see these example prompts:\n\n- Change the hair color to red  \n- Convert to Ghibli style  \n- Replace the apple with orange  \n- Change the wooden table to marble  \n- Add sunglasses  \n- Turn into sketch style  \n- Turn into Disney Pixar style  \n- Make the flame much larger  \n- Change the candle color to blue  \n- Write 'Save Our Planet' on the sign  \n- Write 'Level 30 Unlocked' on the cake  \n- Increase the saturation  \n- Remove the fork  \n- Put the dog in autumn leaves  \n- Change the style to a cubist painting  \n"
      ],
      "color": "#222",
      "bgcolor": "#000"
    },
    {
      "id": 99,
      "type": "Note",
      "pos": [
        1877.9515380859375,
        415.8719787597656
      ],
      "size": [
        210,
        88
      ],
      "flags": {},
      "order": 2,
      "mode": 0,
      "inputs": [],
      "outputs": [],
      "properties": {},
      "widgets_values": [
        "cfg image more > more close to image keep it between (2-4)"
      ],
      "color": "#222",
      "bgcolor": "#000"
    },
    {
      "id": 9,
      "type": "SaveImage",
      "pos": [
        2158.999267578125,
        148.49046325683594
      ],
      "size": [
        1081.208740234375,
        743.9793090820312
      ],
      "flags": {},
      "order": 23,
      "mode": 0,
      "inputs": [
        {
          "name": "images",
          "type": "IMAGE",
          "link": 9
        }
      ],
      "outputs": [],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "SaveImage"
      },
      "widgets_values": [
        "ComfyUI"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 48,
      "type": "LoraLoader",
      "pos": [
        668.2923583984375,
        58.49375915527344
      ],
      "size": [
        270,
        126
      ],
      "flags": {},
      "order": 12,
      "mode": 0,
      "inputs": [
        {
          "name": "model",
          "type": "MODEL",
          "link": 442
        },
        {
          "name": "clip",
          "type": "CLIP",
          "link": 432
        }
      ],
      "outputs": [
        {
          "name": "MODEL",
          "type": "MODEL",
          "links": [
            449
          ]
        },
        {
          "name": "CLIP",
          "type": "CLIP",
          "links": [
            433,
            510
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "LoraLoader"
      },
      "widgets_values": [
        "HiDream-E1-Full.safetensors",
        1,
        1
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 43,
      "type": "VAELoader",
      "pos": [
        311.69354248046875,
        343.95806884765625
      ],
      "size": [
        269.3134765625,
        58
      ],
      "flags": {},
      "order": 3,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "VAE",
          "type": "VAE",
          "links": [
            422,
            423
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "VAELoader"
      },
      "widgets_values": [
        "vae.safetensors"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 42,
      "type": "QuadrupleCLIPLoader",
      "pos": [
        312.8009033203125,
        162.5501251220703
      ],
      "size": [
        268.0444030761719,
        130
      ],
      "flags": {},
      "order": 4,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "CLIP",
          "type": "CLIP",
          "links": [
            432
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "QuadrupleCLIPLoader"
      },
      "widgets_values": [
        "clip_g_hidream.safetensors",
        "clip_l_hidream.safetensors",
        "t5xxl_fp8_e4m3fn_scaled.safetensors",
        "llama_3.1_8b_instruct_fp8_scaled.safetensors"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 37,
      "type": "workflow>IP2PSampler",
      "pos": [
        1456.96630859375,
        66.3336410522461
      ],
      "size": [
        393.7094421386719,
        709.2806396484375
      ],
      "flags": {},
      "order": 21,
      "mode": 0,
      "inputs": [
        {
          "name": "model",
          "type": "MODEL",
          "link": 449
        },
        {
          "name": "positive",
          "type": "CONDITIONING",
          "link": 507
        },
        {
          "name": "negative",
          "type": "CONDITIONING",
          "link": 508
        },
        {
          "name": "vae",
          "type": "VAE",
          "link": 423
        },
        {
          "name": "pixels",
          "type": "IMAGE",
          "link": 426
        }
      ],
      "outputs": [
        {
          "name": "output",
          "type": "LATENT",
          "links": [
            411
          ]
        },
        {
          "name": "denoised_output",
          "type": "LATENT",
          "links": null
        }
      ],
      "properties": {
        "Node name for S&R": "workflow/IP2PSampler"
      },
      "widgets_values": [
        "euler",
        417390688436070,
        "fixed",
        "simple",
        28,
        1,
        5,
        3
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 92,
      "type": "easy cleanGpuUsed",
      "pos": [
        1223.4927978515625,
        123.68292236328125
      ],
      "size": [
        157.38925170898438,
        26
      ],
      "flags": {
        "collapsed": true
      },
      "order": 20,
      "mode": 0,
      "inputs": [
        {
          "name": "anything",
          "type": "*",
          "link": 506
        }
      ],
      "outputs": [
        {
          "name": "output",
          "type": "*",
          "links": [
            507
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfyui-easy-use",
        "ver": "a3f487c822100d69fb37ea267e3da115ba40049f",
        "Node name for S&R": "easy cleanGpuUsed"
      },
      "widgets_values": [],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 6,
      "type": "CLIPTextEncode",
      "pos": [
        1091.8798828125,
        124.56327819824219
      ],
      "size": [
        422.84503173828125,
        164.31304931640625
      ],
      "flags": {
        "collapsed": true
      },
      "order": 19,
      "mode": 0,
      "inputs": [
        {
          "name": "clip",
          "type": "CLIP",
          "link": 433
        },
        {
          "name": "text",
          "type": "STRING",
          "widget": {
            "name": "text"
          },
          "link": 430
        }
      ],
      "outputs": [
        {
          "name": "CONDITIONING",
          "type": "CONDITIONING",
          "slot_index": 0,
          "links": [
            506
          ]
        }
      ],
      "title": "Positive",
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "CLIPTextEncode"
      },
      "widgets_values": [
        "Editing Instruction: Convert the image into a Ghibli style."
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 93,
      "type": "CLIPTextEncode",
      "pos": [
        1090.875244140625,
        161.84893798828125
      ],
      "size": [
        422.84503173828125,
        164.31304931640625
      ],
      "flags": {
        "collapsed": true
      },
      "order": 15,
      "mode": 0,
      "inputs": [
        {
          "name": "clip",
          "type": "CLIP",
          "link": 510
        }
      ],
      "outputs": [
        {
          "name": "CONDITIONING",
          "type": "CONDITIONING",
          "slot_index": 0,
          "links": [
            508
          ]
        }
      ],
      "title": "Positive",
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "CLIPTextEncode"
      },
      "widgets_values": [
        "low resolution, blur"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 44,
      "type": "ImageScale",
      "pos": [
        307.3013000488281,
        455.48675537109375
      ],
      "size": [
        274.3897705078125,
        130
      ],
      "flags": {},
      "order": 13,
      "mode": 0,
      "inputs": [
        {
          "name": "image",
          "type": "IMAGE",
          "link": 425
        }
      ],
      "outputs": [
        {
          "name": "IMAGE",
          "type": "IMAGE",
          "links": [
            426
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "ImageScale"
      },
      "widgets_values": [
        "nearest-exact",
        768,
        0,
        "center"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 98,
      "type": "MarkdownNote",
      "pos": [
        -159.2131805419922,
        -222.7333221435547
      ],
      "size": [
        418.2825622558594,
        665.84130859375
      ],
      "flags": {
        "collapsed": false
      },
      "order": 5,
      "mode": 0,
      "inputs": [],
      "outputs": [],
      "properties": {},
      "widgets_values": [
        "---\n\n### 🧠 HiDream Model Resources\n\n---\n\n#### 🦙 GGUF Models\n\nPrimary model: [HiDream (Civitai)](https://civitai.com/models/1553875)\nAvailable quantizations:\n\n* `fp8`\n* `Q3_K_L`\n* `Q4_K_S`\n\nOther GGUF variants:\n🔗 [HuggingFace - ND911 HiDream e1 full bf16 GGUFs](https://huggingface.co/ND911/HiDream_e1_full_bf16-ggufs/tree/main)\n\n---\n\n### 🎨 ComfyUI Integration (FP16)\n\nComfyUI-compatible model files:\n🔗 [Comfy-Org - HiDream-I1 for ComfyUI](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/tree/main/split_files/diffusion_models)\n\n#### **📁 Recommended File Structure**\n\n```\n📂 ComfyUI/\n├── 📂 models/\n│   ├── 📂 text_encoders/\n│   │   ├── clip_l_hidream.safetensors\n│   │   ├── clip_g_hidream.safetensors\n│   │   ├── t5xxl_fp8_e4m3fn_scaled.safetensors\n│   │   └── llama_3.1_8b_instruct_fp8_scaled.safetensors\n│   ├── 📂 vae/\n│   │   └── ae.safetensors\n│   ├── 📂 diffusion_models/\n│   │   └── hidream_e1_full_bf16.safetensors\n│   └── 📂 lora/\n│       └── HiDream-E1-Full.safetensors  ← Enhancement LoRA\n```\n\n---\n\n#### **Text Encoders**\n\n* [clip\\_l\\_hidream.safetensors](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/blob/main/split_files/text_encoders/clip_l_hidream.safetensors)\n* [clip\\_g\\_hidream.safetensors](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/blob/main/split_files/text_encoders/clip_g_hidream.safetensors)\n* [t5xxl\\_fp8\\_e4m3fn\\_scaled.safetensors](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/blob/main/split_files/text_encoders/t5xxl_fp8_e4m3fn_scaled.safetensors)\n* [llama\\_3.1\\_8b\\_instruct\\_fp8\\_scaled.safetensors](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/blob/main/split_files/text_encoders/llama_3.1_8b_instruct_fp8_scaled.safetensors)\n\n#### **VAE**\n\n* [ae.safetensors](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/blob/main/split_files/vae/ae.safetensors)\n\n#### **Diffusion Model**\n\n* [hidream\\_e1\\_full\\_bf16.safetensors](https://huggingface.co/Comfy-Org/HiDream-I1_ComfyUI/resolve/main/split_files/diffusion_models/hidream_e1_full_bf16.safetensors)\n\n#### **Enhancement LoRA**\n\n* [HiDream-E1-Full.safetensors](https://huggingface.co/HiDream-ai/HiDream-E1-Full/blob/main/HiDream-E1-Full.safetensors)\n  *(Place this in `ComfyUI/models/lora/`)*\n\n---\n"
      ],
      "color": "#222",
      "bgcolor": "#000"
    },
    {
      "id": 13,
      "type": "LoadImage",
      "pos": [
        -939.9137573242188,
        454.7896423339844
      ],
      "size": [
        500.7899169921875,
        405.3478698730469
      ],
      "flags": {},
      "order": 6,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "IMAGE",
          "type": "IMAGE",
          "slot_index": 0,
          "links": [
            425,
            428
          ]
        },
        {
          "name": "MASK",
          "type": "MASK",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "LoadImage"
      },
      "widgets_values": [
        "pasted/image (96).png",
        "image"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 49,
      "type": "CR Prompt Text",
      "pos": [
        -986.3574829101562,
        -1289.0408935546875
      ],
      "size": [
        400,
        200
      ],
      "flags": {},
      "order": 7,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "prompt",
          "type": "STRING",
          "links": [
            435
          ]
        },
        {
          "name": "show_help",
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "ComfyUI_Comfyroll_CustomNodes",
        "ver": "d78b780ae43fcf8c6b7c6505e6ffb4584281ceca",
        "Node name for S&R": "CR Prompt Text"
      },
      "widgets_values": [
        "Your Role: You are an analytical assistant. Your task is to process a source image and a corresponding editing instruction, assuming the instruction accurately describes a desired transformation. You will 1) describe the source image, 2) output the editing instruction (potentially refined for clarity based on the source image context), and 3) describe the *imagined* result of applying that instruction.\n\nInput:\n1. Source Image: The original 'before' image.\n2. Source Instruction: xxxx\n\nTask Breakdown:\n1.  **Describe Source Image:** Generate a description (e.g., key subject, setting) of the Source Image by analyzing it. This will be the first line of your output.\n\n2.  **Output Editing Instruction:** This step determines the second line of your output.\n    * **Assumption:** The provided Source Instruction *accurately* describes the desired edit.\n    * **Goal:** Output a concise, single-line instruction based on the Source Instruction.\n    * **Refinement based on Source Image:** While the Source Instruction is assumed correct, analyze the Source Image to see if the instruction needs refinement for specificity. If the Source Image contains multiple similar objects and the Source Instruction is potentially ambiguous (e.g., \"change the car color\" when there are three cars), refine the instruction to be specific, using positional qualifiers (e.g., 'the left car', 'the bird on the top branch'), size ('the smaller dog', 'the largest building'), or other distinguishing visual features apparent in the Source Image. If the Source Instruction is already specific or if there's no ambiguity in the Source Image context, you can use it directly or with minor phrasing adjustments for naturalness. The *core meaning* of the Source Instruction must be preserved.\n    * **Output:** Present the resulting specific, single-line instruction as the second line.\n\n3.  **Describe Imagined Target Image:** Based *only* on the Source Image description (Line 1) and the Editing Instruction (Line 2), generate a description of the *imagined outcome*.\n    * Describe the scene from Line 1 *as if* the instruction from Line 2 has been successfully applied. Conceptualize the result of the edit on the source description.\n    * This description must be purely a logical prediction based on applying the instruction (Line 2) to the description in Line 1. Do *not* invent details not implied by the instruction or observed in the source image beyond the specified edit. This will be the third line of your output.\n\nOutput Format:\n* Your response *must* consist of exactly three lines.\n* Do not include any other explanations, comments, introductory phrases, labels (like \"Line 1:\"), or formatting.\n* Your output should be in English.\n\nLine 1: [Description of the Source Image]\nLine 2: [The specific, single-line editing instruction based on the Source Instruction and Source Image context]\nLine 3: [Description of the Imagined Target Image based on Lines 1 & 2]\n\nExample 1 (Instruction needs refinement):\nInput: (Source Image: Street with three parked cars), Source Instruction: \"change car color to red\"\nOutput:\nStreet with three parked cars.\nChange the color of the middle car to red.\nStreet with three parked cars, middle one is red.\n\nExample 2 (Instruction is specific enough):\nInput: (Source Image: Two brown dogs sitting on grass), Source Instruction: \"Add sunglasses to the dog on the left.\"\nOutput:\nTwo brown dogs sitting on grass.\nAdd sunglasses to the dog on the left.\nTwo brown dogs on grass, left one wearing sunglasses."
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 51,
      "type": "CR Prompt Text",
      "pos": [
        -1441.6964111328125,
        -989.2789306640625
      ],
      "size": [
        400,
        200
      ],
      "flags": {},
      "order": 8,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "prompt",
          "type": "STRING",
          "links": [
            498
          ]
        },
        {
          "name": "show_help",
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "ComfyUI_Comfyroll_CustomNodes",
        "ver": "d78b780ae43fcf8c6b7c6505e6ffb4584281ceca",
        "Node name for S&R": "CR Prompt Text"
      },
      "widgets_values": [
        "add glassess to this person"
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 94,
      "type": "GeminiComfyUIStyler",
      "pos": [
        -1441.6041259765625,
        -736.72021484375
      ],
      "size": [
        400,
        1050
      ],
      "flags": {},
      "order": 9,
      "mode": 0,
      "inputs": [],
      "outputs": [
        {
          "name": "text_positive",
          "type": "STRING",
          "links": [
            511
          ]
        },
        {
          "name": "text_negative",
          "type": "STRING",
          "links": null
        }
      ],
      "properties": {
        "cnr_id": "comfyui-ollamagemini",
        "ver": "2.0.7",
        "Node name for S&R": "GeminiComfyUIStyler"
      },
      "widgets_values": [
        "",
        "",
        "artstyle-abstract",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        "None",
        true
      ],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 97,
      "type": "MarkdownNote",
      "pos": [
        1278.4034423828125,
        -1127.7701416015625
      ],
      "size": [
        513.494140625,
        809.9844970703125
      ],
      "flags": {},
      "order": 10,
      "mode": 0,
      "inputs": [],
      "outputs": [],
      "properties": {},
      "widgets_values": [
        "# 🧠 ComfyUI-OllamaGemini Custom Node Setup Guide\n\nSet up the [ComfyUI-OllamaGemini](https://github.com/al-swaiti/ComfyUI-OllamaGemini/tree/dev) custom node to integrate with Gemini, OpenAI, Claude, and other LLMs.\n\n---\n\n## 🗂 Step 1: Clone the Repository\n\n### 🔧 On Linux/macOS:\n\nOpen a terminal and run:\n\n```bash\ncd /path/to/ComfyUI/custom_nodes\ngit clone https://github.com/al-swaiti/ComfyUI-OllamaGemini.git\n```\n\n### 🪟 On Windows:\n\nOpen **Command Prompt** or **PowerShell**, then run:\n\n```powershell\ncd path\\to\\ComfyUI\\custom_nodes\ngit clone https://github.com/al-swaiti/ComfyUI-OllamaGemini.git\n```\n\n---\n\n## 🔐 Step 2: Get Your Gemini API Key\n\n1. Visit [https://makersuite.google.com/app/apikey](https://makersuite.google.com/app/apikey)\n2. Sign in with your Google account.\n3. Copy the **Gemini API Key**.\n\n---\n\n## 🛠 Step 3: Configure Your API Keys\n\nOpen (or create) the following file:\n\n```\nComfyUI/custom_nodes/ComfyUI-OllamaGemini/config.json\n```\n\nPaste and edit the configuration like this:\n\n```json\n{\n  \"GEMINI_API_KEY\": \"your_gemini_api_key\",\n  \"OPENAI_API_KEY\": \"your_openai_api_key\",\n  \"ANTHROPIC_API_KEY\": \"your_claude_api_key\",\n  \"OLLAMA_URL\": \"http://localhost:11434\",\n  \"QWEN_API_KEY\": \"your_qwen_api_key\"\n}\n```\n\n❗ You may leave unused API keys as empty strings (`\"\"`) or delete those lines.\n\n---\n\n## ✅ Final Step\n\nRestart ComfyUI. The new custom node should now be available and ready for use with Gemini and other models.\n\n---"
      ],
      "color": "#222",
      "bgcolor": "#000"
    },
    {
      "id": 8,
      "type": "VAEDecode",
      "pos": [
        1894.7786865234375,
        321.8638000488281
      ],
      "size": [
        210,
        46
      ],
      "flags": {},
      "order": 22,
      "mode": 0,
      "inputs": [
        {
          "name": "samples",
          "type": "LATENT",
          "link": 411
        },
        {
          "name": "vae",
          "type": "VAE",
          "link": 422
        }
      ],
      "outputs": [
        {
          "name": "IMAGE",
          "type": "IMAGE",
          "slot_index": 0,
          "links": [
            9
          ]
        }
      ],
      "properties": {
        "cnr_id": "comfy-core",
        "ver": "0.3.30",
        "Node name for S&R": "VAEDecode"
      },
      "widgets_values": [],
      "color": "#2a363b",
      "bgcolor": "#3f5159"
    },
    {
      "id": 85,
      "type": "Note",
      "pos": [
        315.99200439453125,
        635.1597290039062
      ],
      "size": [
        210,
        88
      ],
      "flags": {},
      "order": 11,
      "mode": 0,
      "inputs": [],
      "outputs": [],
      "properties": {},
      "widgets_values": [
        "keep it 768 for width"
      ],
      "color": "#222",
      "bgcolor": "#000"
    }
  ],
  "links": [
    [
      9,
      8,
      0,
      9,
      0,
      "IMAGE"
    ],
    [
      411,
      37,
      0,
      8,
      0,
      "LATENT"
    ],
    [
      422,
      43,
      0,
      8,
      1,
      "VAE"
    ],
    [
      423,
      43,
      0,
      37,
      3,
      "VAE"
    ],
    [
      425,
      13,
      0,
      44,
      0,
      "IMAGE"
    ],
    [
      426,
      44,
      0,
      37,
      4,
      "IMAGE"
    ],
    [
      428,
      13,
      0,
      46,
      0,
      "IMAGE"
    ],
    [
      429,
      46,
      0,
      47,
      0,
      "STRING"
    ],
    [
      430,
      46,
      0,
      6,
      1,
      "STRING"
    ],
    [
      432,
      42,
      0,
      48,
      1,
      "CLIP"
    ],
    [
      433,
      48,
      1,
      6,
      0,
      "CLIP"
    ],
    [
      435,
      49,
      0,
      50,
      0,
      "STRING"
    ],
    [
      437,
      50,
      0,
      46,
      3,
      "STRING"
    ],
    [
      442,
      55,
      0,
      48,
      0,
      "MODEL"
    ],
    [
      449,
      48,
      0,
      37,
      0,
      "MODEL"
    ],
    [
      498,
      51,
      0,
      87,
      0,
      "STRING"
    ],
    [
      503,
      87,
      0,
      50,
      1,
      "STRING"
    ],
    [
      506,
      6,
      0,
      92,
      0,
      "*"
    ],
    [
      507,
      92,
      0,
      37,
      1,
      "CONDITIONING"
    ],
    [
      508,
      93,
      0,
      37,
      2,
      "CONDITIONING"
    ],
    [
      510,
      48,
      1,
      93,
      0,
      "CLIP"
    ],
    [
      511,
      94,
      0,
      87,
      1,
      "STRING"
    ]
  ],
  "groups": [],
  "config": {},
  "extra": {
    "ds": {
      "scale": 1.015255979947714,
      "offset": [
        2065.5702470601173,
        814.0591810949066
      ]
    },
    "frontendVersion": "1.18.6",
    "groupNodes": {
      "IP2PSampler": {
        "nodes": [
          {
            "type": "KSamplerSelect",
            "pos": [
              912,
              1536
            ],
            "size": {
              "0": 315,
              "1": 58
            },
            "flags": {},
            "order": 6,
            "mode": 0,
            "outputs": [
              {
                "name": "SAMPLER",
                "type": "SAMPLER",
                "links": [],
                "localized_name": "SAMPLER"
              }
            ],
            "properties": {
              "Node name for S&R": "KSamplerSelect"
            },
            "widgets_values": [
              "euler"
            ],
            "index": 0,
            "inputs": [
              {
                "name": "sampler_name",
                "localized_name": "sampler_name",
                "type": "COMBO",
                "widget": {
                  "name": "sampler_name"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              }
            ]
          },
          {
            "type": "RandomNoise",
            "pos": [
              912,
              1200
            ],
            "size": {
              "0": 315,
              "1": 82
            },
            "flags": {},
            "order": 7,
            "mode": 0,
            "outputs": [
              {
                "name": "NOISE",
                "type": "NOISE",
                "links": [],
                "localized_name": "NOISE"
              }
            ],
            "properties": {
              "Node name for S&R": "RandomNoise"
            },
            "widgets_values": [
              156680208700303,
              "fixed"
            ],
            "index": 1,
            "inputs": [
              {
                "name": "noise_seed",
                "localized_name": "noise_seed",
                "type": "INT",
                "widget": {
                  "name": "noise_seed"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              }
            ]
          },
          {
            "type": "Reroute",
            "pos": [
              720,
              1488
            ],
            "size": [
              75,
              26
            ],
            "flags": {},
            "order": 9,
            "mode": 0,
            "inputs": [
              {
                "name": "",
                "type": "*",
                "link": null
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "*",
                "links": null
              }
            ],
            "properties": {
              "showOutputText": false,
              "horizontal": false
            },
            "index": 2
          },
          {
            "type": "BasicScheduler",
            "pos": [
              912,
              1632
            ],
            "size": {
              "0": 315,
              "1": 106
            },
            "flags": {},
            "order": 12,
            "mode": 0,
            "inputs": [
              {
                "name": "model",
                "type": "MODEL",
                "link": null,
                "localized_name": "model"
              },
              {
                "name": "scheduler",
                "localized_name": "scheduler",
                "type": "COMBO",
                "widget": {
                  "name": "scheduler"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              },
              {
                "name": "steps",
                "localized_name": "steps",
                "type": "INT",
                "widget": {
                  "name": "steps"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              },
              {
                "name": "denoise",
                "localized_name": "denoise",
                "type": "FLOAT",
                "widget": {
                  "name": "denoise"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              }
            ],
            "outputs": [
              {
                "name": "SIGMAS",
                "type": "SIGMAS",
                "links": [],
                "localized_name": "SIGMAS"
              }
            ],
            "properties": {
              "Node name for S&R": "BasicScheduler"
            },
            "widgets_values": [
              "normal",
              20,
              1
            ],
            "index": 3
          },
          {
            "type": "Reroute",
            "pos": [
              575,
              1344
            ],
            "size": [
              75,
              26
            ],
            "flags": {},
            "order": 14,
            "mode": 0,
            "inputs": [
              {
                "name": "",
                "type": "*",
                "link": null
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "*",
                "links": null
              }
            ],
            "properties": {
              "showOutputText": false,
              "horizontal": false
            },
            "index": 4
          },
          {
            "type": "Reroute",
            "pos": [
              570,
              1386
            ],
            "size": [
              75,
              26
            ],
            "flags": {},
            "order": 13,
            "mode": 0,
            "inputs": [
              {
                "name": "",
                "type": "*",
                "link": null
              }
            ],
            "outputs": [
              {
                "name": "",
                "type": "*",
                "links": null
              }
            ],
            "properties": {
              "showOutputText": false,
              "horizontal": false
            },
            "index": 5
          },
          {
            "type": "InstructPixToPixConditioning",
            "pos": [
              672,
              1344
            ],
            "size": {
              "0": 235.1999969482422,
              "1": 86
            },
            "flags": {},
            "order": 15,
            "mode": 0,
            "inputs": [
              {
                "name": "positive",
                "type": "CONDITIONING",
                "link": null,
                "localized_name": "positive"
              },
              {
                "name": "negative",
                "type": "CONDITIONING",
                "link": null,
                "localized_name": "negative"
              },
              {
                "name": "vae",
                "type": "VAE",
                "link": null,
                "localized_name": "vae"
              },
              {
                "name": "pixels",
                "type": "IMAGE",
                "link": null,
                "localized_name": "pixels"
              }
            ],
            "outputs": [
              {
                "name": "positive",
                "type": "CONDITIONING",
                "links": [],
                "slot_index": 0,
                "localized_name": "positive"
              },
              {
                "name": "negative",
                "type": "CONDITIONING",
                "links": [],
                "slot_index": 1,
                "localized_name": "negative"
              },
              {
                "name": "latent",
                "type": "LATENT",
                "links": [],
                "slot_index": 2,
                "localized_name": "latent"
              }
            ],
            "properties": {
              "Node name for S&R": "InstructPixToPixConditioning"
            },
            "index": 6,
            "widgets_values": []
          },
          {
            "type": "DualCFGGuider",
            "pos": [
              912,
              1344
            ],
            "size": {
              "0": 315,
              "1": 142
            },
            "flags": {},
            "order": 16,
            "mode": 0,
            "inputs": [
              {
                "name": "model",
                "type": "MODEL",
                "link": null,
                "localized_name": "model"
              },
              {
                "name": "cond1",
                "type": "CONDITIONING",
                "link": null,
                "localized_name": "cond1"
              },
              {
                "name": "cond2",
                "type": "CONDITIONING",
                "link": null,
                "localized_name": "cond2"
              },
              {
                "name": "negative",
                "type": "CONDITIONING",
                "link": null,
                "localized_name": "negative"
              },
              {
                "name": "cfg_conds",
                "localized_name": "cfg_conds",
                "type": "FLOAT",
                "widget": {
                  "name": "cfg_conds"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              },
              {
                "name": "cfg_cond2_negative",
                "localized_name": "cfg_cond2_negative",
                "type": "FLOAT",
                "widget": {
                  "name": "cfg_cond2_negative"
                },
                "boundingRect": [
                  0,
                  0,
                  0,
                  0
                ],
                "link": null
              }
            ],
            "outputs": [
              {
                "name": "GUIDER",
                "type": "GUIDER",
                "links": [],
                "slot_index": 0,
                "localized_name": "GUIDER"
              }
            ],
            "properties": {
              "Node name for S&R": "DualCFGGuider"
            },
            "widgets_values": [
              3,
              1.5
            ],
            "index": 7
          },
          {
            "type": "SamplerCustomAdvanced",
            "pos": [
              1296,
              1200
            ],
            "size": {
              "0": 355.20001220703125,
              "1": 106
            },
            "flags": {},
            "order": 17,
            "mode": 0,
            "inputs": [
              {
                "name": "noise",
                "type": "NOISE",
                "link": null,
                "slot_index": 0,
                "localized_name": "noise"
              },
              {
                "name": "guider",
                "type": "GUIDER",
                "link": null,
                "slot_index": 1,
                "localized_name": "guider"
              },
              {
                "name": "sampler",
                "type": "SAMPLER",
                "link": null,
                "slot_index": 2,
                "localized_name": "sampler"
              },
              {
                "name": "sigmas",
                "type": "SIGMAS",
                "link": null,
                "slot_index": 3,
                "localized_name": "sigmas"
              },
              {
                "name": "latent_image",
                "type": "LATENT",
                "link": null,
                "slot_index": 4,
                "localized_name": "latent_image"
              }
            ],
            "outputs": [
              {
                "name": "output",
                "type": "LATENT",
                "links": [],
                "slot_index": 0,
                "localized_name": "output"
              },
              {
                "name": "denoised_output",
                "type": "LATENT",
                "links": null,
                "localized_name": "denoised_output"
              }
            ],
            "properties": {
              "Node name for S&R": "SamplerCustomAdvanced"
            },
            "index": 8,
            "widgets_values": []
          }
        ],
        "links": [
          [
            null,
            0,
            2,
            0,
            4,
            "MODEL"
          ],
          [
            2,
            0,
            3,
            0,
            26,
            "MODEL"
          ],
          [
            null,
            0,
            5,
            0,
            7,
            "CONDITIONING"
          ],
          [
            null,
            0,
            4,
            0,
            6,
            "CONDITIONING"
          ],
          [
            4,
            0,
            6,
            0,
            35,
            "CONDITIONING"
          ],
          [
            5,
            0,
            6,
            1,
            29,
            "CONDITIONING"
          ],
          [
            null,
            2,
            6,
            2,
            4,
            "VAE"
          ],
          [
            null,
            0,
            6,
            3,
            13,
            "IMAGE"
          ],
          [
            2,
            0,
            7,
            0,
            26,
            "MODEL"
          ],
          [
            6,
            0,
            7,
            1,
            33,
            "CONDITIONING"
          ],
          [
            6,
            1,
            7,
            2,
            33,
            "CONDITIONING"
          ],
          [
            5,
            0,
            7,
            3,
            29,
            "CONDITIONING"
          ],
          [
            1,
            0,
            8,
            0,
            19,
            "NOISE"
          ],
          [
            7,
            0,
            8,
            1,
            28,
            "GUIDER"
          ],
          [
            0,
            0,
            8,
            2,
            20,
            "SAMPLER"
          ],
          [
            3,
            0,
            8,
            3,
            21,
            "SIGMAS"
          ],
          [
            6,
            2,
            8,
            4,
            33,
            "LATENT"
          ]
        ],
        "external": [
          [
            {
              "type": "SamplerCustomAdvanced",
              "pos": [
                1296,
                1200
              ],
              "size": {
                "0": 355.20001220703125,
                "1": 106
              },
              "flags": {},
              "order": 17,
              "mode": 0,
              "inputs": [
                {
                  "name": "noise",
                  "type": "NOISE",
                  "link": null,
                  "slot_index": 0
                },
                {
                  "name": "guider",
                  "type": "GUIDER",
                  "link": null,
                  "slot_index": 1
                },
                {
                  "name": "sampler",
                  "type": "SAMPLER",
                  "link": null,
                  "slot_index": 2
                },
                {
                  "name": "sigmas",
                  "type": "SIGMAS",
                  "link": null,
                  "slot_index": 3
                },
                {
                  "name": "latent_image",
                  "type": "LATENT",
                  "link": null,
                  "slot_index": 4
                }
              ],
              "outputs": [
                {
                  "name": "output",
                  "type": "LATENT",
                  "links": [],
                  "shape": 3,
                  "slot_index": 0
                },
                {
                  "name": "denoised_output",
                  "type": "LATENT",
                  "links": null,
                  "shape": 3
                }
              ],
              "properties": {
                "Node name for S&R": "SamplerCustomAdvanced"
              },
              "index": 8
            },
            0,
            "LATENT"
          ]
        ],
        "config": {
          "0": {},
          "1": {},
          "2": {
            "input": {
              "MODEL": {
                "name": "model"
              }
            }
          },
          "3": {},
          "4": {
            "input": {
              "CONDITIONING": {
                "name": "positive"
              }
            }
          },
          "5": {
            "input": {
              "CONDITIONING": {
                "name": "negative"
              }
            }
          },
          "6": {},
          "7": {
            "input": {
              "cfg_conds": {
                "name": "cfg_text"
              },
              "cfg_cond2_negative": {
                "name": "cfg_image"
              }
            }
          },
          "8": {}
        }
      }
    },
    "VHS_latentpreview": true,
    "VHS_latentpreviewrate": 0,
    "VHS_MetadataImage": true,
    "VHS_KeepIntermediate": true
  },
  "version": 0.4
}