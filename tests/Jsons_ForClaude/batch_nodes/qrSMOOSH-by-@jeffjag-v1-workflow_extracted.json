[
    {
        "id": 4,
        "name": "CheckpointLoaderSimple",
        "prompts": {
            "text": "realisticVisionV40_v40VAE.ckpt"
        }
    },
    {
        "id": 17,
        "name": "VAEDecode"
    },
    {
        "id": 43,
        "name": "Note",
        "prompts": {
            "text": "I used the SDXL workflow from Scott Detweiler of Stability AI and the ComfyAnonymous unCLIPConditioning example as jumping off points. Check out Scott's youtube tutorials: https://www.youtube.com/watch?v=Zteta2_JvdA and the unCLIP example:\nhttps://comfyanonymous.github.io/ComfyUI_examples/unclip/\n\nThis is the second public iteration of my SMOOSH workflow to create AI Art QR Codes in the SD 1.5 model of your choice:\n\n-- Image selection really matters. In my testing, images of uniform overall brightness are best. That's because high contrast input images tend to take over the qr code rather than letting it show up. Like the \"dark\" parts of the light image might actually conflict with the qr code in the center. \n--- So when selecting images for the \"dark\" loaders it also helps to pick ones that are already dark to match. And so on for the light images.  Even with the pre-processing that makes it even darker, which you can see in the preview.\n\n-- This version's CLIPTextEncode supports SD 1.5 models. \n--- SDXL can be added easily by swapping them out for the \"CLIPTextEncodeSDXL\" nodes.\n\n-- Each image loader has color-coded friends.\n\n\n*** Tweakable Variables: ***\n\n-- unCLIPConditioning controls how much of each image prompt you'll be absorbing with the smoosh. I have the defaults set to Strength of 1.0 and noise augmentation of 0.0 so they both come in equally.\n\n-- KSampler CFG cranked to all heck at 26 gives me great results, you may like it lower, but I think results get too blurry/soft below 15.\n\n-- KSampler Denoise around 0.4 or even lower. This helps keep the integrity of the QR Code shapes.\n\n - Text Prompts are important; they influence the qrSMOOSH and they should be used to get your desired look out of the final image.\n\n-- CLIP Vision. I think the pytorch_model.bin in the CLIP Vision loader works good here. (link to the file at the \"comfyanonymous.github.io\" link above)\n\n-- I simplified the image size nodes to propagate where needed so you don't have to keep track of that.\n\n-- Use the Final Image Filter Adjustments to tweak your output before saving. If you want to fine tune it - lock your seed to \"fixed\" after you've generated one then you can JUST adjust the filter when you run the queue prompt again. so long as you don't change any other variables, it'll just save a new version with your updated filter settings. "
        }
    },
    {
        "id": 55,
        "name": "SaveImage"
    },
    {
        "id": 72,
        "name": "KSampler"
    },
    {
        "id": 80,
        "name": "LoadImage",
        "prompts": {
            "text": "The True Value of Purity_00336_.png"
        }
    },
    {
        "id": 81,
        "name": "VAEEncode"
    },
    {
        "id": 82,
        "name": "Image scale to side"
    },
    {
        "id": 90,
        "name": "LoadImage",
        "prompts": {
            "text": "ProtoGraphic2432__0025 (1).png"
        }
    },
    {
        "id": 91,
        "name": "Image scale to side"
    },
    {
        "id": 92,
        "name": "VAEEncode"
    },
    {
        "id": 94,
        "name": "LatentCompositeMasked"
    },
    {
        "id": 95,
        "name": "LoadImageMask",
        "prompts": {
            "text": "Builders of Titania QR tall7.png"
        }
    },
    {
        "id": 98,
        "name": "CLIPVisionLoader",
        "prompts": {
            "text": "pytorch_model.bin"
        }
    },
    {
        "id": 99,
        "name": "CLIPVisionEncode"
    },
    {
        "id": 101,
        "name": "unCLIPConditioning"
    },
    {
        "id": 106,
        "name": "unCLIPConditioning"
    },
    {
        "id": 107,
        "name": "CLIPVisionEncode"
    },
    {
        "id": 109,
        "name": "ConditioningCombine"
    },
    {
        "id": 119,
        "name": "Integer"
    },
    {
        "id": 120,
        "name": "Integer"
    },
    {
        "id": 123,
        "name": "Image Filter Adjustments"
    },
    {
        "id": 130,
        "name": "CLIPTextEncode",
        "prompts": {
            "text": "crisp sharp focus photo of computer circuits and magma with dusty valves covered in volcanic rock near piles of scratched metal all over the dystopian ground, molten lava exploding, computer transistors, embers, ash, flames"
        }
    },
    {
        "id": 131,
        "name": "CLIPTextEncode",
        "prompts": {
            "text": "painting, drawing, illustration, DOF, depth of field, lattice, nets, dots, masculine, wheels, webs, fan, warping, bokeh, blur, glowing"
        }
    },
    {
        "id": 132,
        "name": "Image Dragan Photography Filter"
    },
    {
        "id": 133,
        "name": "PreviewImage"
    },
    {
        "id": 134,
        "name": "Image Dragan Photography Filter"
    },
    {
        "id": 135,
        "name": "PreviewImage"
    },
    {
        "id": 137,
        "name": "Image scale to side"
    },
    {
        "id": 138,
        "name": "Image scale to side"
    }
]