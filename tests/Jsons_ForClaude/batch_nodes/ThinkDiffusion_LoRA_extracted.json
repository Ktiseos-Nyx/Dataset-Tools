[
    {
        "id": 4,
        "name": "CheckpointLoaderSimple",
        "prompts": {
            "text": "sd_xl_base_1.0_0.9vae.safetensors"
        }
    },
    {
        "id": 5,
        "name": "EmptyLatentImage"
    },
    {
        "id": 6,
        "name": "CLIPTextEncode",
        "prompts": {
            "text": "a golden robotic alien god, masterpiece, 4k, ultra detailed"
        }
    },
    {
        "id": 7,
        "name": "CLIPTextEncode",
        "prompts": {
            "text": "text, watermark"
        }
    },
    {
        "id": 10,
        "name": "KSamplerAdvanced"
    },
    {
        "id": 11,
        "name": "KSamplerAdvanced"
    },
    {
        "id": 12,
        "name": "CheckpointLoaderSimple",
        "prompts": {
            "text": "sd_xl_refiner_1.0_0.9vae.safetensors"
        }
    },
    {
        "id": 13,
        "name": "PrimitiveNode",
        "prompts": {
            "text": "a golden robotic alien god, masterpiece, 4k, ultra detailed"
        }
    },
    {
        "id": 14,
        "name": "PrimitiveNode",
        "prompts": {
            "text": "text, watermark"
        }
    },
    {
        "id": 15,
        "name": "CLIPTextEncode",
        "prompts": {
            "text": "a golden robotic alien god, masterpiece, 4k, ultra detailed"
        }
    },
    {
        "id": 16,
        "name": "CLIPTextEncode",
        "prompts": {
            "text": "text, watermark"
        }
    },
    {
        "id": 17,
        "name": "VAEDecode"
    },
    {
        "id": 19,
        "name": "SaveImage"
    },
    {
        "id": 36,
        "name": "Note",
        "prompts": {
            "text": "This is a checkpoint model loader. \n - This is set up automatically with the optimal settings for whatever SD model version you choose to use.\n - In this example, it is for the Base SDXL model\n - This node is also used for SD1.5 and SD2.x models\n \nNOTE: When loading in another person's workflow, be sure to manually choose your own *local* model. This also applies to LoRas and all their deviations"
        }
    },
    {
        "id": 37,
        "name": "Note",
        "prompts": {
            "text": "This is a checkpoint model loader. \n - This is set up automatically with the optimal settings for whatever SD model version you choose to use.\n - In this example, it is for the Refiner SDXL model\n\nNOTE: When loading in another person's workflow, be sure to manually choose your own *local* model. This also applies to LoRas and all their deviations."
        }
    },
    {
        "id": 38,
        "name": "Note",
        "prompts": {
            "text": "These nodes are where you include the text for:\n - what you want in the picture (Positive Prompt, Green)\n - or what you don't want in the picture (Negative Prompt, Red)\n\nThis node type is called a \"PrimitiveNode\" if you are searching for the node type."
        }
    },
    {
        "id": 39,
        "name": "Note",
        "prompts": {
            "text": "These nodes receive the text from the prompt and use the optimal CLIP settings for the specified checkpoint model (in this case: SDXL Base)"
        }
    },
    {
        "id": 40,
        "name": "Note",
        "prompts": {
            "text": "Here are the settings that SHOULD stay in place if you want this workflow to work correctly:\n - add_noise: enable = This adds random noise into the picture so the model can denoise it\n\n - return_with_leftover_noise: enable = This sends the latent image data and all it's leftover noise to the next KSampler node.\n\nThe settings to pay attention to:\n - control_after_generate = generates a new random seed after each workflow job completed.\n - steps = This is the amount of iterations you would like to run the positive and negative CLIP prompts through. Each Step will add (positive) or remove (negative) pixels based on what stable diffusion \"thinks\" should be there according to the model's training\n - cfg = This is how much you want SDXL to adhere to the prompt. Lower CFG gives you more creative but often blurrier results. Higher CFG (recommended max 10) gives you stricter results according to the CLIP prompt. If the CFG value is too high, it can also result in \"burn-in\" where the edges of the picture become even stronger, often highlighting details in unnatural ways.\n - sampler_name = This is the sampler type, and unfortunately different samplers and schedulers have better results with fewer steps, while others have better success with higher steps. This will require experimentation on your part!\n - scheduler = The algorithm/method used to choose the timesteps to denoise the picture.\n - start_at_step = This is the step number the KSampler will start out it's process of de-noising the picture or \"removing the random noise to reveal the picture within\". The first KSampler usually starts with Step 0. Starting at step 0 is the same as setting denoise to 1.0 in the regular Sampler node.\n - end_at_step = This is the step number the KSampler will stop it's process of de-noising the picture. If there is any remaining leftover noise and return_with_leftover_noise is enabled, then it will pass on the left over noise to the next KSampler (assuming there is another one)."
        }
    },
    {
        "id": 41,
        "name": "Note",
        "prompts": {
            "text": "This node will take the latent data from the KSampler and, using the VAE, it will decode it into visible data\n\nVAE = Latent --> Visible\n\nThis can then be sent to the Save Image node to be saved as a PNG."
        }
    },
    {
        "id": 42,
        "name": "Note",
        "prompts": {
            "text": "This node sets the image's resolution in Width and Height.\n\nNOTE: For SDXL, it is recommended to use trained values listed below:\n - 1024 x 1024\n - 1152 x 896\n - 896  x 1152\n - 1216 x 832\n - 832  x 1216\n - 1344 x 768\n - 768  x 1344\n - 1536 x 640\n - 640  x 1536"
        }
    },
    {
        "id": 43,
        "name": "Note",
        "prompts": {
            "text": "These nodes receive the text from the prompt and use the optimal CLIP settings for the specified checkpoint model (in this case: SDXL Refiner)"
        }
    },
    {
        "id": 45,
        "name": "PrimitiveNode"
    },
    {
        "id": 47,
        "name": "PrimitiveNode"
    },
    {
        "id": 48,
        "name": "Note",
        "prompts": {
            "text": "These can be used to control the total sampling steps and the step at which the sampling switches to the refiner."
        }
    },
    {
        "id": 50,
        "name": "LoraLoader",
        "prompts": {
            "text": "Alien_God_sdxl_1.safetensors"
        }
    }
]