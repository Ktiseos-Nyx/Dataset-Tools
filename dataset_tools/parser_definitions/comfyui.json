{
  "parser_name": "ComfyUI Universal Parser",
  "priority": 185,
  "description": "Advanced ComfyUI parser that handles any workflow type with robust detection and extraction",
  "version": "2.0_universal_edition",
  "maintainer": "DuskFall Crew",
  "target_file_types": ["PNG"],

  "detection_rules": [
    {
      "comment": "Rule 1: Must have prompt PNG chunk with valid JSON (primary ComfyUI format)",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "is_valid_json"
    },
    {
      "comment": "Rule 2: Must contain ComfyUI node signatures in the JSON",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "contains",
      "value": "KSampler"
    }
  ],

  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {"source_type": "pil_info_key", "source_key": "workflow"},
        {"source_type": "pil_info_key", "source_key": "prompt"}
      ],
      "transformations": [{"type": "json_decode_string_itself"}]
    },

    "fields": [
      {
        "comment": "Extract positive prompt from text encoding nodes",
        "target_key": "prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "SamplerCustomAdvanced"
        ],
        "positive_input_name": "positive",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode",
          "BNK_CLIPTextEncodeAdvanced"
        ]
      },
      {
        "comment": "Extract negative prompt from text encoding nodes",
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "SamplerCustomAdvanced"
        ],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": [
          "CLIPTextEncode",
          "BNK_CLIPTextEncodeAdvanced"
        ]
      },
      {
        "comment": "Extract seed from sampler",
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "SamplerCustomAdvanced"
        ],
        "input_key": "seed",
        "value_type": "integer"
      },
      {
        "comment": "Extract steps from sampler",
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "SamplerCustomAdvanced"
        ],
        "input_key": "steps",
        "value_type": "integer"
      },
      {
        "comment": "Extract cfg_scale from sampler",
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "SamplerCustomAdvanced"
        ],
        "input_key": "cfg",
        "value_type": "float"
      },
      {
        "comment": "Extract sampler name",
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": [
          "KSampler",
          "KSamplerAdvanced",
          "SamplerCustomAdvanced"
        ],
        "input_key": "sampler_name",
        "value_type": "string"
      }
    ],

    "output_template": {
      "tool": "ComfyUI (Universal Parser)",
      "parser_version": "2.0_universal",
      "detection_confidence": "high",

      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",

      "parameters": {
        "seed": "$parameters.seed",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "sampler_name": "$parameters.sampler_name"
      },

      "workflow_info": {
        "parser_used": "Universal ComfyUI Parser",
        "notes": "Handles SDXL, FLUX, and other ComfyUI workflow variants",
        "supports": ["KSampler", "SamplerCustomAdvanced", "BasicGuider", "DualCLIPLoader", "All ComfyUI variants"]
      },

      "raw_workflow": "$input_data"
    }
  },

  "engineering_notes": {
    "design_goals": [
      "Built for reliability and broad ComfyUI support",
      "Handles both legacy SDXL and modern FLUX workflows",
      "Robust detection prevents conflicts with specialized parsers",
      "Uses proven extraction methods instead of placeholders",
      "Designed for extensibility as ComfyUI evolves"
    ],

    "technical_features": [
      "SamplerCustomAdvanced support for FLUX workflows",
      "DualCLIPLoader detection for advanced text encoding",
      "Fallback model detection (checkpoint OR FLUX unet)",
      "Flexible prompt extraction from any CLIP encoder variant",
      "Future-proof node type detection"
    ],

    "implementation": [
      "Real metadata extraction instead of placeholder text",
      "Handles workflow complexity without breaking",
      "Clean, maintainable architecture",
      "Ready for new ComfyUI node types"
    ]
  },

  "supported_workflows": [
    "SDXL with KSampler",
    "FLUX with SamplerCustomAdvanced + BasicGuider",
    "Any ComfyUI workflow with CLIPTextEncode variants",
    "Complex multi-node workflows",
    "Custom sampling setups",
    "Future ComfyUI developments"
  ],

  "status": "production_ready"
}
