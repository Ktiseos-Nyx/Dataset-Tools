{
  "parser_name": "ComfyUI_T5_Architecture",
  "priority": 190,
  "description": "Advanced T5-based model architecture detection for SD3, Flux, PixArt, AuraFlow, and HunyuanDiT",
  "version": "3.0",
  "maintainer": "Ktiseos Nyx",
  "target_file_types": ["PNG"],

  "detection_rules": [
    {
      "comment": "Rule 1: Must have prompt PNG chunk with valid JSON (primary ComfyUI format)",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "is_valid_json"
    },
    {
      "comment": "Rule 2: Must contain T5 architecture signatures (Flux, SD3, PixArt, etc.)",
      "source_type": "pil_info_key",
      "source_key": "prompt",
      "operator": "contains",
      "value": "DualCLIPLoader"
    }
  ],

  "parsing_instructions": {
    "input_data": {
      "source_options": [
        {"source_type": "pil_info_key", "source_key": "workflow"},
        {"source_type": "pil_info_key", "source_key": "prompt"}
      ],
      "transformations": [{"type": "json_decode_string_itself"}]
    },

    "fields": [
      {
        "target_key": "prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "positive_input_name": "positive",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": ["CLIPTextEncode", "CLIPTextEncodeSD3", "T5TextEncode"]
      },
      {
        "target_key": "negative_prompt",
        "method": "comfy_find_text_from_main_sampler_input",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "negative_input_name": "negative",
        "text_input_name_in_encoder": "text",
        "text_encoder_node_types": ["CLIPTextEncode", "CLIPTextEncodeSD3", "T5TextEncode"]
      },
      {
        "target_key": "parameters.seed",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "input_key": "seed",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.steps",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "input_key": "steps",
        "value_type": "integer"
      },
      {
        "target_key": "parameters.cfg_scale",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "input_key": "cfg",
        "value_type": "float"
      },
      {
        "target_key": "parameters.sampler_name",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "input_key": "sampler_name",
        "value_type": "string"
      },
      {
        "target_key": "parameters.scheduler",
        "method": "comfy_find_input_of_main_sampler",
        "sampler_node_types": ["KSampler", "KSamplerAdvanced"],
        "input_key": "scheduler",
        "value_type": "string"
      },
      {
        "target_key": "parameters.t5_model",
        "method": "comfy_get_node_by_class",
        "class_type": "DualCLIPLoader",
        "field_name": "clip_name1",
        "optional": true
      },
      {
        "target_key": "parameters.clip_model",
        "method": "comfy_get_node_by_class",
        "class_type": "DualCLIPLoader",
        "field_name": "clip_name2",
        "optional": true
      },
      {
        "target_key": "parameters.architecture_type",
        "method": "comfy_detect_t5_architecture",
        "architecture_families": {
          "sd3": ["SD3CheckpointLoader", "TripleCLIPLoader", "CLIPTextEncodeSD3"],
          "flux": ["DualCLIPLoaderGGUF", "FluxGuidance", "ModelSamplingFlux"],
          "pixart": ["PixArtCheckpointLoader", "PixArtTextEncode", "PixArtSampler"],
          "auraflow": ["AuraFlowLoader", "AuraT5TextEncode", "AuraFlowSampler"],
          "hunyuan": ["HunyuanDiTLoader", "HyditTokenizer", "HunyuanTextEncode"]
        },
        "optional": true
      },
      {
        "target_key": "parameters.width",
        "method": "comfy_get_node_by_class",
        "class_type": "EmptyLatentImage",
        "field_name": "width",
        "value_type": "integer",
        "optional": true
      },
      {
        "target_key": "parameters.height",
        "method": "comfy_get_node_by_class",
        "class_type": "EmptyLatentImage",
        "field_name": "height",
        "value_type": "integer",
        "optional": true
      }
    ],

    "output_template": {
      "tool": "ComfyUI (T5 Architecture)",
      "prompt": "$prompt",
      "negative_prompt": "$negative_prompt",
      "parameters": {
        "seed": "$parameters.seed",
        "steps": "$parameters.steps",
        "cfg_scale": "$parameters.cfg_scale",
        "sampler_name": "$parameters.sampler_name",
        "scheduler": "$parameters.scheduler",
        "t5_model": "$parameters.t5_model",
        "clip_model": "$parameters.clip_model",
        "width": "$parameters.width",
        "height": "$parameters.height"
      },
      "architecture_info": {
        "detected_as": "T5-based architecture",
        "supports": ["SD3", "Flux", "PixArt", "Dual CLIP", "T5 text encoding"]
      },
      "raw_metadata": "$INPUT_JSON_OBJECT_AS_STRING",
      "_metadata": {
        "processed_at": "$CURRENT_TIMESTAMP",
        "processor": "MetadataEngine",
        "template_processed": true
      }
    }
  },

  "notes": [
    "Updated to current MetadataEngine format",
    "Detects T5-based architectures like SD3, Flux, PixArt",
    "Handles dual CLIP loaders and T5 text encoding",
    "Modern multi-encoder architecture support"
  ]
}